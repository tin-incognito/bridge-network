// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/bridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgKeygen struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	T       int32  `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgKeygen) Reset()         { *m = MsgKeygen{} }
func (m *MsgKeygen) String() string { return proto.CompactTextString(m) }
func (*MsgKeygen) ProtoMessage()    {}
func (*MsgKeygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{0}
}
func (m *MsgKeygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKeygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKeygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKeygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeygen.Merge(m, src)
}
func (m *MsgKeygen) XXX_Size() int {
	return m.Size()
}
func (m *MsgKeygen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeygen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeygen proto.InternalMessageInfo

func (m *MsgKeygen) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgKeygen) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *MsgKeygen) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MsgKeygenResponse struct {
}

func (m *MsgKeygenResponse) Reset()         { *m = MsgKeygenResponse{} }
func (m *MsgKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgKeygenResponse) ProtoMessage()    {}
func (*MsgKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{1}
}
func (m *MsgKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeygenResponse.Merge(m, src)
}
func (m *MsgKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeygenResponse proto.InternalMessageInfo

type MsgTssPool struct {
	Creator    string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PoolPubKey string   `protobuf:"bytes,3,opt,name=pool_pub_key,json=poolPubKey,proto3" json:"pool_pub_key,omitempty"`
	KeygenType int32    `protobuf:"varint,4,opt,name=keygen_type,json=keygenType,proto3" json:"keygen_type,omitempty"`
	PubKeys    []string `protobuf:"bytes,5,rep,name=pub_keys,json=pubKeys,proto3" json:"pub_keys,omitempty"`
	Height     int64    `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Blame      *Blame   `protobuf:"bytes,7,opt,name=blame,proto3" json:"blame,omitempty"`
	Chains     []string `protobuf:"bytes,8,rep,name=chains,proto3" json:"chains,omitempty"`
	Signer     []byte   `protobuf:"bytes,9,opt,name=signer,proto3" json:"signer,omitempty"`
	KeygenTime int64    `protobuf:"varint,10,opt,name=keygen_time,json=keygenTime,proto3" json:"keygen_time,omitempty"`
}

func (m *MsgTssPool) Reset()         { *m = MsgTssPool{} }
func (m *MsgTssPool) String() string { return proto.CompactTextString(m) }
func (*MsgTssPool) ProtoMessage()    {}
func (*MsgTssPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{2}
}
func (m *MsgTssPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTssPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTssPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTssPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTssPool.Merge(m, src)
}
func (m *MsgTssPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgTssPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTssPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTssPool proto.InternalMessageInfo

func (m *MsgTssPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTssPool) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgTssPool) GetPoolPubKey() string {
	if m != nil {
		return m.PoolPubKey
	}
	return ""
}

func (m *MsgTssPool) GetKeygenType() int32 {
	if m != nil {
		return m.KeygenType
	}
	return 0
}

func (m *MsgTssPool) GetPubKeys() []string {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *MsgTssPool) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgTssPool) GetBlame() *Blame {
	if m != nil {
		return m.Blame
	}
	return nil
}

func (m *MsgTssPool) GetChains() []string {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *MsgTssPool) GetSigner() []byte {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgTssPool) GetKeygenTime() int64 {
	if m != nil {
		return m.KeygenTime
	}
	return 0
}

type MsgTssPoolResponse struct {
}

func (m *MsgTssPoolResponse) Reset()         { *m = MsgTssPoolResponse{} }
func (m *MsgTssPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTssPoolResponse) ProtoMessage()    {}
func (*MsgTssPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{3}
}
func (m *MsgTssPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTssPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTssPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTssPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTssPoolResponse.Merge(m, src)
}
func (m *MsgTssPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTssPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTssPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTssPoolResponse proto.InternalMessageInfo

type MsgTssKeySign struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgTssKeySign) Reset()         { *m = MsgTssKeySign{} }
func (m *MsgTssKeySign) String() string { return proto.CompactTextString(m) }
func (*MsgTssKeySign) ProtoMessage()    {}
func (*MsgTssKeySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{4}
}
func (m *MsgTssKeySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTssKeySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTssKeySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTssKeySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTssKeySign.Merge(m, src)
}
func (m *MsgTssKeySign) XXX_Size() int {
	return m.Size()
}
func (m *MsgTssKeySign) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTssKeySign.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTssKeySign proto.InternalMessageInfo

func (m *MsgTssKeySign) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgTssKeySignResponse struct {
}

func (m *MsgTssKeySignResponse) Reset()         { *m = MsgTssKeySignResponse{} }
func (m *MsgTssKeySignResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTssKeySignResponse) ProtoMessage()    {}
func (*MsgTssKeySignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{5}
}
func (m *MsgTssKeySignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTssKeySignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTssKeySignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTssKeySignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTssKeySignResponse.Merge(m, src)
}
func (m *MsgTssKeySignResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTssKeySignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTssKeySignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTssKeySignResponse proto.InternalMessageInfo

type MsgRegisterTssPool struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgRegisterTssPool) Reset()         { *m = MsgRegisterTssPool{} }
func (m *MsgRegisterTssPool) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTssPool) ProtoMessage()    {}
func (*MsgRegisterTssPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{6}
}
func (m *MsgRegisterTssPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTssPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTssPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTssPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTssPool.Merge(m, src)
}
func (m *MsgRegisterTssPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTssPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTssPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTssPool proto.InternalMessageInfo

func (m *MsgRegisterTssPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterTssPool) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgRegisterTssPool) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgRegisterTssPoolResponse struct {
}

func (m *MsgRegisterTssPoolResponse) Reset()         { *m = MsgRegisterTssPoolResponse{} }
func (m *MsgRegisterTssPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterTssPoolResponse) ProtoMessage()    {}
func (*MsgRegisterTssPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4b439741a43952, []int{7}
}
func (m *MsgRegisterTssPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterTssPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterTssPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterTssPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterTssPoolResponse.Merge(m, src)
}
func (m *MsgRegisterTssPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterTssPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterTssPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterTssPoolResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgKeygen)(nil), "bridge.bridge.MsgKeygen")
	proto.RegisterType((*MsgKeygenResponse)(nil), "bridge.bridge.MsgKeygenResponse")
	proto.RegisterType((*MsgTssPool)(nil), "bridge.bridge.MsgTssPool")
	proto.RegisterType((*MsgTssPoolResponse)(nil), "bridge.bridge.MsgTssPoolResponse")
	proto.RegisterType((*MsgTssKeySign)(nil), "bridge.bridge.MsgTssKeySign")
	proto.RegisterType((*MsgTssKeySignResponse)(nil), "bridge.bridge.MsgTssKeySignResponse")
	proto.RegisterType((*MsgRegisterTssPool)(nil), "bridge.bridge.MsgRegisterTssPool")
	proto.RegisterType((*MsgRegisterTssPoolResponse)(nil), "bridge.bridge.MsgRegisterTssPoolResponse")
}

func init() { proto.RegisterFile("bridge/bridge/tx.proto", fileDescriptor_4f4b439741a43952) }

var fileDescriptor_4f4b439741a43952 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0x66, 0x21, 0x40, 0x3c, 0x21, 0xfd, 0xd9, 0x26, 0xe9, 0x62, 0x21, 0xd7, 0xb5, 0x7a, 0x70,
	0x7a, 0x20, 0x52, 0xfa, 0x06, 0x51, 0xa5, 0x1c, 0x10, 0x12, 0x72, 0x73, 0xea, 0xa1, 0xc8, 0x0e,
	0xa3, 0x65, 0x15, 0xc0, 0x96, 0x77, 0x91, 0xe2, 0xb7, 0xe8, 0x6b, 0xf4, 0x49, 0xda, 0x63, 0x8e,
	0x3d, 0x56, 0xf0, 0x22, 0x95, 0xd7, 0x6b, 0x27, 0x90, 0x84, 0x9c, 0xbc, 0x33, 0xf3, 0xed, 0xf7,
	0xcd, 0x7e, 0xb3, 0x6b, 0x38, 0x89, 0x52, 0x31, 0xe1, 0x78, 0x66, 0x3e, 0xea, 0xb6, 0x9f, 0xa4,
	0xb1, 0x8a, 0xe9, 0x61, 0x91, 0xe8, 0x17, 0x1f, 0xbb, 0xbb, 0x09, 0x8b, 0x66, 0xe1, 0x1c, 0x0b,
	0xa4, 0x77, 0x09, 0xd6, 0x50, 0xf2, 0x01, 0x66, 0x1c, 0x17, 0x94, 0x41, 0xfb, 0x3a, 0xc5, 0x50,
	0xc5, 0x29, 0x23, 0x2e, 0xf1, 0xad, 0xa0, 0x0c, 0x69, 0x07, 0x88, 0x62, 0x75, 0x97, 0xf8, 0xcd,
	0x80, 0x28, 0x4a, 0x61, 0x6f, 0x12, 0xaa, 0x90, 0x35, 0x34, 0x48, 0xaf, 0xbd, 0x77, 0xf0, 0xb6,
	0x22, 0x0a, 0x50, 0x26, 0xf1, 0x42, 0xa2, 0xf7, 0xab, 0x0e, 0x30, 0x94, 0xfc, 0x4a, 0xca, 0x51,
	0x1c, 0xcf, 0x76, 0xf0, 0xbf, 0x82, 0xba, 0x98, 0x68, 0x01, 0x2b, 0xa8, 0x8b, 0x09, 0x75, 0xa1,
	0x93, 0xc4, 0xf1, 0x6c, 0x9c, 0x2c, 0xa3, 0xf1, 0x0d, 0x66, 0x46, 0x09, 0xf2, 0xdc, 0x68, 0x19,
	0x0d, 0x30, 0xa3, 0x1f, 0xe0, 0xe0, 0x46, 0x8b, 0x8d, 0x55, 0x96, 0x20, 0xdb, 0xd3, 0xbd, 0x41,
	0x91, 0xba, 0xca, 0x12, 0xa4, 0x5d, 0xd8, 0x37, 0xbb, 0x25, 0x6b, 0xba, 0x8d, 0x5c, 0x2d, 0xd1,
	0x5b, 0x25, 0x3d, 0x81, 0xd6, 0x14, 0x05, 0x9f, 0x2a, 0xd6, 0x72, 0x89, 0xdf, 0x08, 0x4c, 0x44,
	0x3f, 0x43, 0x53, 0x7b, 0xc3, 0xda, 0x2e, 0xf1, 0x0f, 0xce, 0x8f, 0xfa, 0x1b, 0x36, 0xf6, 0x2f,
	0xf2, 0x5a, 0x50, 0x40, 0x72, 0x8e, 0xeb, 0x69, 0x28, 0x16, 0x92, 0xed, 0x6b, 0x72, 0x13, 0xe5,
	0x79, 0x29, 0xf8, 0x02, 0x53, 0x66, 0xb9, 0xc4, 0xef, 0x04, 0x26, 0x7a, 0xd8, 0xaf, 0x98, 0x23,
	0x03, 0x2d, 0x5c, 0xf6, 0x2b, 0xe6, 0xe8, 0x1d, 0x01, 0xbd, 0xb7, 0xaa, 0x72, 0xf0, 0x14, 0x0e,
	0x8b, 0xec, 0x00, 0xb3, 0x6f, 0x82, 0xef, 0x98, 0x91, 0xf7, 0x1e, 0x8e, 0x37, 0xa0, 0x15, 0xc7,
	0x0f, 0xcd, 0x1c, 0x20, 0x17, 0x52, 0x61, 0xfa, 0xf2, 0x30, 0xde, 0x40, 0x63, 0x2e, 0xb9, 0x99,
	0x46, 0xbe, 0xa4, 0x3d, 0xb0, 0xf2, 0x63, 0x84, 0x6a, 0x99, 0xa2, 0x99, 0xc5, 0x7d, 0xc2, 0xeb,
	0x81, 0xfd, 0x98, 0xbf, 0x54, 0x3f, 0xff, 0x5d, 0x87, 0xc6, 0x50, 0x72, 0xfa, 0x15, 0x5a, 0xe5,
	0x35, 0xdb, 0xf2, 0xb5, 0xba, 0x37, 0xb6, 0xfb, 0x5c, 0xa5, 0x64, 0xa3, 0x97, 0xd0, 0x2e, 0x0f,
	0xd0, 0x7d, 0x0c, 0x36, 0x25, 0xfb, 0xe3, 0xb3, 0xa5, 0x8a, 0x68, 0x04, 0xf0, 0xc0, 0xd5, 0xde,
	0x93, 0x1b, 0x4c, 0xd5, 0xfe, 0xb4, 0xab, 0x5a, 0x31, 0x8e, 0xe1, 0xf5, 0xb6, 0xc7, 0x4f, 0xf4,
	0xb1, 0x05, 0xb1, 0x4f, 0x5f, 0x84, 0x94, 0x02, 0x17, 0x67, 0x7f, 0x56, 0x0e, 0xb9, 0x5b, 0x39,
	0xe4, 0xdf, 0xca, 0x21, 0x3f, 0xd7, 0x4e, 0xed, 0x6e, 0xed, 0xd4, 0xfe, 0xae, 0x9d, 0xda, 0xf7,
	0x63, 0xf3, 0xb2, 0x6f, 0xab, 0x3f, 0x41, 0x96, 0xa0, 0x8c, 0x5a, 0xfa, 0x8d, 0x7f, 0xf9, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x21, 0x70, 0x2e, 0x74, 0x27, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Keygen(ctx context.Context, in *MsgKeygen, opts ...grpc.CallOption) (*MsgKeygenResponse, error)
	TssPool(ctx context.Context, in *MsgTssPool, opts ...grpc.CallOption) (*MsgTssPoolResponse, error)
	TssKeySign(ctx context.Context, in *MsgTssKeySign, opts ...grpc.CallOption) (*MsgTssKeySignResponse, error)
	RegisterTssPool(ctx context.Context, in *MsgRegisterTssPool, opts ...grpc.CallOption) (*MsgRegisterTssPoolResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Keygen(ctx context.Context, in *MsgKeygen, opts ...grpc.CallOption) (*MsgKeygenResponse, error) {
	out := new(MsgKeygenResponse)
	err := c.cc.Invoke(ctx, "/bridge.bridge.Msg/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TssPool(ctx context.Context, in *MsgTssPool, opts ...grpc.CallOption) (*MsgTssPoolResponse, error) {
	out := new(MsgTssPoolResponse)
	err := c.cc.Invoke(ctx, "/bridge.bridge.Msg/TssPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TssKeySign(ctx context.Context, in *MsgTssKeySign, opts ...grpc.CallOption) (*MsgTssKeySignResponse, error) {
	out := new(MsgTssKeySignResponse)
	err := c.cc.Invoke(ctx, "/bridge.bridge.Msg/TssKeySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterTssPool(ctx context.Context, in *MsgRegisterTssPool, opts ...grpc.CallOption) (*MsgRegisterTssPoolResponse, error) {
	out := new(MsgRegisterTssPoolResponse)
	err := c.cc.Invoke(ctx, "/bridge.bridge.Msg/RegisterTssPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Keygen(context.Context, *MsgKeygen) (*MsgKeygenResponse, error)
	TssPool(context.Context, *MsgTssPool) (*MsgTssPoolResponse, error)
	TssKeySign(context.Context, *MsgTssKeySign) (*MsgTssKeySignResponse, error)
	RegisterTssPool(context.Context, *MsgRegisterTssPool) (*MsgRegisterTssPoolResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Keygen(ctx context.Context, req *MsgKeygen) (*MsgKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (*UnimplementedMsgServer) TssPool(ctx context.Context, req *MsgTssPool) (*MsgTssPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssPool not implemented")
}
func (*UnimplementedMsgServer) TssKeySign(ctx context.Context, req *MsgTssKeySign) (*MsgTssKeySignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssKeySign not implemented")
}
func (*UnimplementedMsgServer) RegisterTssPool(ctx context.Context, req *MsgRegisterTssPool) (*MsgRegisterTssPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTssPool not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeygen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.bridge.Msg/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Keygen(ctx, req.(*MsgKeygen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TssPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTssPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TssPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.bridge.Msg/TssPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TssPool(ctx, req.(*MsgTssPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TssKeySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTssKeySign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TssKeySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.bridge.Msg/TssKeySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TssKeySign(ctx, req.(*MsgTssKeySign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterTssPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterTssPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterTssPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.bridge.Msg/RegisterTssPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterTssPool(ctx, req.(*MsgRegisterTssPool))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.bridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Keygen",
			Handler:    _Msg_Keygen_Handler,
		},
		{
			MethodName: "TssPool",
			Handler:    _Msg_TssPool_Handler,
		},
		{
			MethodName: "TssKeySign",
			Handler:    _Msg_TssKeySign_Handler,
		},
		{
			MethodName: "RegisterTssPool",
			Handler:    _Msg_RegisterTssPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/bridge/tx.proto",
}

func (m *MsgKeygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKeygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKeygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.T != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTssPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTssPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTssPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeygenTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeygenTime))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chains[iNdEx])
			copy(dAtA[i:], m.Chains[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Chains[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Blame != nil {
		{
			size, err := m.Blame.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PubKeys[iNdEx])
			copy(dAtA[i:], m.PubKeys[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.PubKeys[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.KeygenType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeygenType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PoolPubKey) > 0 {
		i -= len(m.PoolPubKey)
		copy(dAtA[i:], m.PoolPubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTssPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTssPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTssPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTssKeySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTssKeySign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTssKeySign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTssKeySignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTssKeySignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTssKeySignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTssPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTssPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTssPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterTssPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterTssPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterTssPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgKeygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.T != 0 {
		n += 1 + sovTx(uint64(m.T))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTssPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PoolPubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeygenType != 0 {
		n += 1 + sovTx(uint64(m.KeygenType))
	}
	if len(m.PubKeys) > 0 {
		for _, s := range m.PubKeys {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	if m.Blame != nil {
		l = m.Blame.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Chains) > 0 {
		for _, s := range m.Chains {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeygenTime != 0 {
		n += 1 + sovTx(uint64(m.KeygenTime))
	}
	return n
}

func (m *MsgTssPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTssKeySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTssKeySignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterTssPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterTssPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgKeygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKeygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKeygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTssPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTssPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTssPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenType", wireType)
			}
			m.KeygenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeygenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blame == nil {
				m.Blame = &Blame{}
			}
			if err := m.Blame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenTime", wireType)
			}
			m.KeygenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeygenTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTssPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTssPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTssPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTssKeySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTssKeySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTssKeySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTssKeySignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTssKeySignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTssKeySignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTssPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTssPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTssPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterTssPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterTssPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterTssPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
