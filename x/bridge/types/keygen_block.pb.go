// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/bridge/keygen_block.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KeygenBlock struct {
	Index   string         `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Height  int64          `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Keygens []*KeygenValue `protobuf:"bytes,3,rep,name=keygens,proto3" json:"keygens,omitempty"`
}

func (m *KeygenBlock) Reset()         { *m = KeygenBlock{} }
func (m *KeygenBlock) String() string { return proto.CompactTextString(m) }
func (*KeygenBlock) ProtoMessage()    {}
func (*KeygenBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_98c81052669ea309, []int{0}
}
func (m *KeygenBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeygenBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeygenBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeygenBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeygenBlock.Merge(m, src)
}
func (m *KeygenBlock) XXX_Size() int {
	return m.Size()
}
func (m *KeygenBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_KeygenBlock.DiscardUnknown(m)
}

var xxx_messageInfo_KeygenBlock proto.InternalMessageInfo

func (m *KeygenBlock) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *KeygenBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *KeygenBlock) GetKeygens() []*KeygenValue {
	if m != nil {
		return m.Keygens
	}
	return nil
}

func init() {
	proto.RegisterType((*KeygenBlock)(nil), "bridge.bridge.KeygenBlock")
}

func init() { proto.RegisterFile("bridge/bridge/keygen_block.proto", fileDescriptor_98c81052669ea309) }

var fileDescriptor_98c81052669ea309 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0x2a, 0xca, 0x4c,
	0x49, 0x4f, 0xd5, 0x87, 0x52, 0xd9, 0xa9, 0x95, 0xe9, 0xa9, 0x79, 0xf1, 0x49, 0x39, 0xf9, 0xc9,
	0xd9, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xbc, 0x10, 0x29, 0x3d, 0x08, 0x25, 0x85, 0x5d,
	0x43, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x44, 0x83, 0x52, 0x21, 0x17, 0xb7, 0x37, 0x58, 0xd4, 0x09,
	0x64, 0x8a, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a, 0x6a, 0x85, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x67, 0x10, 0x84, 0x23, 0x24, 0xc6, 0xc5, 0x96, 0x91, 0x9a, 0x99, 0x9e, 0x51, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe5, 0x09, 0x99, 0x70, 0xb1, 0x43, 0x8c, 0x2c, 0x96, 0x60, 0x56,
	0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd2, 0x43, 0xb1, 0x5f, 0x0f, 0x62, 0x74, 0x18, 0xc8, 0xbe, 0x20,
	0x98, 0x52, 0x27, 0xfd, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x12, 0x85,
	0xba, 0xb3, 0x02, 0xe6, 0xe0, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0x53, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x80, 0xe3, 0xdb, 0xff, 0x00, 0x00, 0x00,
}

func (m *KeygenBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeygenBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeygenBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keygens) > 0 {
		for iNdEx := len(m.Keygens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keygens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeygenBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintKeygenBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintKeygenBlock(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeygenBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeygenBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeygenBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovKeygenBlock(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovKeygenBlock(uint64(m.Height))
	}
	if len(m.Keygens) > 0 {
		for _, e := range m.Keygens {
			l = e.Size()
			n += 1 + l + sovKeygenBlock(uint64(l))
		}
	}
	return n
}

func sovKeygenBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeygenBlock(x uint64) (n int) {
	return sovKeygenBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeygenBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeygenBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeygenBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeygenBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygenBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeygenBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeygenBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygenBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeygenBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeygenBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeygenBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keygens = append(m.Keygens, &KeygenValue{})
			if err := m.Keygens[len(m.Keygens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeygenBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeygenBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeygenBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeygenBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygenBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeygenBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeygenBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeygenBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeygenBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeygenBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeygenBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeygenBlock = fmt.Errorf("proto: unexpected end of group")
)
